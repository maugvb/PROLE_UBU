options
{
    STATIC=true;
}

PARSER_BEGIN(practica)
import java.util.ArrayList;

public class practica{
    /*
     * A test
     */
    public static void main(String args[]) throws java.io.FileNotFoundException {
    
        practicaTokenManager tkmngr;
            if ( args.length < 1 ) {
           tkmngr = new practicaTokenManager( new SimpleCharStream(System.in) );
            } else {
           tkmngr = new practicaTokenManager( 
                     new SimpleCharStream( new java.io.FileInputStream(args[0]),0,0 ) 
                  );
        };
    
        Token tk;
    
        if ( args.length < 1 ) {
           System.out.print("Enter Expression: ");
           System.out.flush();
        };
        
        try {
                while ( (tk = tkmngr.getNextToken()).kind != EOF );
        } catch (TokenMgrError x) {
            System.out.println("Exiting.");
            throw x;
        };
    
        System.out.println("\n\n\nNúmero de clases es "+tkmngr.clasesCNT+", con estereotipos "+ tkmngr.stereotypeNum);
        System.out.println("\nNúmero de relaciones es: "+tkmngr.numRel);
        System.out.println("\nLa clase con el mayor número de atributos es "+tkmngr.maxClassMem+ ", con "+tkmngr.maxNumMem+" atributos.");
        System.out.println("\nEl método con mas argumentos es '"+tkmngr.methMaxAtr+"' de la clase '"+tkmngr.maxAtrClass+"'");
        System.out.println("\nEl número de notas es "+tkmngr.notes);

    
        }

}

PARSER_END(practica)




/*
 * The terminals
 */




TOKEN_MGR_DECLS : {
    static int clasesCNT = 0;
    static int numRel = 0, maxNumMem = 0, tmpNumMem = 0, tmpNumMeth = 0, stereotypeNum = 0, notes=0, numAtr=0, auxNumAtr=0;
    static ArrayList<String> clases = new ArrayList<String>();
    static ArrayList<String> stereotype = new ArrayList<String>();
    static String tmpClassName, maxClassMem, auxMaxClassMem, tmpStereotypeName, maxAtrClass, methMaxAtr, auxMethodId;
}
<*>TOKEN:{ 
    <#ID: (["A"-"Z","a"-"z"])+>
|   <#STRING: (<CHARAC>|<NUM>|(" "|"."|"+"|"*"|"_"|"-"))+> 
|   <#CHARAC: ["A"-"Z","a"-"z"]>
|   <#NUM:    ["0"-"9"]>

|   <#ENDS:   ("<>"|"++"|"^")>
|   <#END1:   (<ENDS>|"<")?(<STRING>)?>
|   <#END2:   (<STRING>)?(<ENDS>|">")?>
|   <#ARROW:  <END1>("-")(".-")?<END2>>

|   <#EOL:    ";"|",">
|   <#SPECIAL: "+"|"-"|(":"" ")?|"_">
|   <#IDFULL: (["A"-"Z","a"-"z","0"-"9"])+>
}

TOKEN:{
    /* <COM: "//">:COMENT*/
    <OPEN: "["> {  } : CLASS
|    <NOTE_START: "[note:"> { notes++;} :NOTE
|    <REL: (<ARROW>|"^")> {
                    System.out.println("\n\n Relacion: "+image.toString()+"\n\n");

                    numRel++;}
}
/*
<COMENT>TOKEN: {
    <EOL_COMENT: "\n">:DEFAULT
}*/
<NOTE>TOKEN : {
        <CLOSE_NOTE: "]"> {  } : DEFAULT
 
}

<CLASS>TOKEN : {
    <ID_CLASS: (<ID>)> {            auxMaxClassMem = image.toString();
                                    tmpClassName = image.toString();
                                    int aux = 0;
                                    if(clases.size() == 0){
                                        clases.add(image.toString());
                                        clasesCNT++;
                                        System.out.println(image.toString());
                                    }else{
                                        for(int i =0; i<clases.size();i++){
                                            if(clases.get(i).equals(image.toString())){
                                                aux=1;
                                            }
                                        }  
                                        if(aux==0){
                                            clases.add(image.toString());
                                            clasesCNT++;
                                            System.out.println(image);
                                        }
                                    }
                                  
                                 }
|   <OPEN_STEREOTYPE: "<<"> {}: STEREOTYPE
|   <BARRA_CLASS: "|"> {  } : MEMBERS
|   <CLOSE_CLASS: "]"> {tmpNumMem=0;} : DEFAULT

}

<STEREOTYPE>TOKEN:{
    <ID_STEREOTYPE: (<ID>)>  {  tmpStereotypeName = image.toString();
                                int auxSt = 0;
                                if(clases.size() == 0){
                                    stereotype.add(image.toString());
                                    stereotypeNum++;
                                    System.out.println(image.toString());
                                }else{
                                    for(int i =0; i<stereotype.size();i++){
                                        if(stereotype.get(i).equals(image.toString())){
                                            auxSt=1;
                                        }
                                    }  
                                    if(auxSt==0){
                                        stereotype.add(image.toString());
                                        stereotypeNum++;
                                        System.out.println(image);
                                    }
                                }
                            }
|   <CLOSE_STEREOTYPE: ">>">    { }: CLASS

}

<MEMBERS>TOKEN: {
    <ID_MEMBER: (<STRING>)(": ")?(<STRING>)?(";")?>   {tmpNumMem++; System.out.println("\n\nID MEMBER\n\n"+image+"Numero"+tmpNumMem + "Clase "+ auxMaxClassMem);}
|    <BARRA_MEMBERS: "|"> { if(tmpNumMem>maxNumMem){
                                maxNumMem=tmpNumMem;
                                maxClassMem = auxMaxClassMem;
                            } 
                            tmpNumMem=0;
                        } : METHODS
|   <EOL_MEMBERS: <EOL>> { if(tmpNumMem>maxNumMem){
                                maxNumMem=tmpNumMem;
                                maxClassMem = auxMaxClassMem;
                            } 
                        }
|   <CLOSE_MEMBERS: "]"> { if(tmpNumMem>maxNumMem){
                                maxNumMem=tmpNumMem;
                                maxClassMem = auxMaxClassMem;
                            } 
                            tmpNumMem=0;

                        } : DEFAULT

}
<METHODS>TOKEN: {
    <ID_METHOD: (<SPECIAL>)?(<IDFULL>)> {auxMethodId=image.toString();
                                            System.out.println("NUEVO ATRIBUTO ' "+image+" '");}
|   <OPEN_METHODS: "("> {  } : PAR
|   <NEW_METHOD: ";"> {
    if(numAtr<auxNumAtr){
        methMaxAtr= auxMethodId;
        numAtr=auxNumAtr;
        maxAtrClass = auxMaxClassMem;

        
    }


    auxNumAtr=0;
}
|   <EOL_METHODS: <EOL>> { tmpNumMeth++; }
|   <CLOSE_METHODS: "]"> { 
    if(numAtr<auxNumAtr){
        methMaxAtr= auxMethodId;
        numAtr=auxNumAtr;
        maxAtrClass = auxMaxClassMem;

        
    }


    auxNumAtr=0;
 } : DEFAULT

}

<PAR>TOKEN: {
     <OPEN_PAR: ")"> {  } : METHODS
|    <PAR_TOKEN: (<STRING>|" "|":")> { auxNumAtr++; }
}

<*>SKIP:
{
    <"/*"(~[])*"*/">
|   <"//"(~["\n"])*>
|  < ~[] > {;}
| <("\n"|" ")> {;}
}


