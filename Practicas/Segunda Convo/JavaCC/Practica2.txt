+-----------------------------------------------+
| Enunciado provisional de la segunda práctica  |
+-----------------------------------------------+

Usando un TokenManager construido con JavaCC procesar ficheros de
texto que contenga diagramas de clases en código yuml.
Yuml es una especificación que permite representar diagramas
UML en formato texto, para probarlo puedes acceder a la 
siguiente web: https://yuml.me/diagram/scruffy/class/draw.

El analizador generado debe ser capaz de leer como entrada un
fichero de yuml y, al finalizar el procesado, mostrar las 
siguientes estadísticas:
- el número de clases.
- el número de relaciones.
- la clase con mayor número de métodos.
- la clase con mayor número de atributos.

Los comentarios se deben ignorar para todas las estadísticas.
Deberá ser capaz de procesar un archivo pasándoselo por 
parámetro.

Se valorará la calidad del código (utilizar definiciones 
regulares, nombres de variables con significado, etc.) así 
como que pueda ser capaz de reconocer cualquier fuente 
interpretable por yuml, más información sobre la gramática y
especificaciones del yuml en los siguientes enlaces:
- https://yuml.me/diagram/scruffy/class/samples
- https://www.cs.utexas.edu/~schwartz/MDELite/Docs/YumlManual.html

Nota: una clase puede aparecer en diversas ocasiones durante el código, 
      por lo que realizar correctamente las estadísticas sería necesario 
      mantener una estructura donde se apuntara qué clases ya han aparecido. 
      Como puede resultar complicado utilizar estructuras complejas en C, 
      se puede presuponer que cada bloque entre corchetes es una clase con 
      independencia de que sea el mismo nombre.

Ante un ejemplo como el siguiente:
------------------------------------------------------------------
// Diagrama de ejemplo
// -------------------

// Clases y sus relaciones
[Customer] <>- orders*>[Order] ++-0..*> [LineItem]

// Anotación
[Order] -   [note: An annotation about Order class {bg:wheat}]

// Más detalles en la clase: atributos y métodos
[Customer|+forname: string;+surname: string;-password: string|login(user,pass)]

Debería dar:
- El número de clases es 3.
- El número de relaciones es 3.
- La clase con el mayor número de atributos es "Customer", con 3 atributos.
- La clase con el mayor número de métodos es "Customer", con 1 métodos.



Ante un ejemplo como el siguiente:
------------------------------------------------------------------
// Anotaciones que no tenemos en cuenta como clase
[note: Comentarios sin línea {bg:wheat}],

// Clases y sus relaciones
[Customer]<>1-orders 0..*>[Order], 
[Order]++*-*>[LineItem], [Order]-1>[DeliveryMethod], [Order]*-*>[Product], 
[Category]<->[Product|-description:string|+getDescription():string;+getID():int ; -computePrice():double]

// Algunas clases pueden aparecer varias veces pero se debe contar solo una vez.
[DeliveryMethod] ^ [National | +cif: string]
[DeliveryMethod] ^  [International|+country: string]

[LineItem|-prod:string; -qty:int|+getProd():string;+getQuantity():int]


Debería dar:
- El número de clases es 8.
- El número de relaciones es 7.
- La clase con el mayor número de atributos es "LineItem", con 2 atributos.
- La clase con el mayor número de métodos es "Product", con 3 métodos.











|   <#STRING: (<CHARAC>|<NUM>|(" "|"."|"+"|"*"|"_"|"-"))+> 
|   <#CHARAC: ["A"-"Z","a"-"z"]>
|   <#NUM:    ["0"-"9"]>

|   <#ENDS:   ("<>"|"++"|"^")>
|   <#END1:   (<ENDS>|"<")?(<STRING>)?>
|   <#END2:   (<STRING>)?(<ENDS>|">")?>
|   <#ARROW:  <END1>("-")(".-")?<END2>>





|    <REL: <ARROW>> { numRel++; }
