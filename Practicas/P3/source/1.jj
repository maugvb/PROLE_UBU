
options {
    STATIC=false;
}

PARSER_BEGIN(Compilador)


public class Compilador {
    public static void main(String args[]) throws java.io.FileNotFoundException {
        //final Stack<String> stack = new Stack<String>();

        try {
            final Compilador compilador = initCompilador(args);
            compilador.parse();        
        } catch (java.io.FileNotFoundException ex) {
            System.out.println("File not found (" + args[0] + "), first argument must be a valid path.");
        } catch (ParseException ex) {
            System.out.println(ex);
            System.out.println("Parser caught an unexpected exception, exiting...");
        }
    }

    static Compilador initCompilador(String args[]) throws java.io.FileNotFoundException {
        if (args.length < 1) {
            return new Compilador(System.in);
        }
        return new Compilador(new java.io.FileInputStream(args[0]));
    }
}
PARSER_END(Compilador)

TOKEN_MGR_DECLS : {}

/* ALL */
TOKEN : {
    <NUM: (["0"-"9"])+ >
|   <#CHARAC: ["A"-"Z", "a"-"z"]>
|   <COMPUTE:"COMPUTE">
|   <EQUAL:"=">
|   <MOVE:"MOVE">
|   <TO:"TO">
|   <IF:"IF">
|   <THEN:"THEN">
|   <EVALUATE:"EVALUATE">
|   <END_EVALUATE:"END_EVALUATE">
|   <PERFORM:"PERFORM">
|   <UNTIL:"UNTIL">
|   <END_PERFORM:"END_PERFORM">
|   <DISPLAY:"DISPLAY">
|   <ELSE:"ELSE">
|   <END_IF:"END-IF">
|   <WHEN:"WHEN">
|   <ADDITION:"+">
|   <SUBSTRACTION:"-">
|   <MULTIPLICATION: "*">
|   <DIVISION: "/">
|   <PARENTHESIS_START: "(">
|   <PARENTHESIS_END: ")">
|   <ID: (<CHARAC>)(<CHARAC>|<NUM>)* >

}
SKIP : {
     <~[]>
|    <"**"(~["\n", "\r"])*>
}


void parse() : {} {
    sentences()
}

void sentences() : {} {
    sent() (sentences())?
}

void sent() : {} {
    assig() | proc()
}


void assig() : {} {
    <COMPUTE> <ID> <EQUAL> arithexp() <NUM>
|   <MOVE> (<NUM> | <ID>) <TO> <ID>
}

void proc() : {} {
    <IF> arithexp() <THEN> sentences() elseopt()
|   <EVALUATE> <ID> (whenclause())+ <END_EVALUATE>
|   <PERFORM> <UNTIL> arithexp() sentences() <END_PERFORM>
|   <DISPLAY> arithexp()
    
}

void elseopt() : {} {
    <ELSE> sentences() <END_IF>
|   <END_IF>
}
void whenclause() : {} {
    <WHEN> arithexp() sentences()
}
void arithexp() : {} {
    ( (<ADDITION> | <SUBSTRACTION>) arithexp() multexp() | multexp() )
}
void multexp() : {} {
    ( (<MULTIPLICATION> | <DIVISION>) multexp() fac() | fac() )
}
void fac() : {
    Token token;
} {
    token = <NUM> { System.out.println("\tmete " + token.image); }
|   token = <ID> { System.out.println("\tvalord " + token.image);  }
|   <PARENTHESIS_START>  arithexp() <PARENTHESIS_END> 
}


