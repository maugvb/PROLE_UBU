
options {
    BUILD_TOKEN_MANAGER=true;
    DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(Compilador)

public class Compilador {
    public static void main(String args[]) throws java.io.FileNotFoundException {
        final CompiladorTokenManager tokenManager = initTokenManager(args);

        try {
            while (tokenManager.getNextToken().kind != EOF); // Process All tokens.
            System.out.println("Finished");
        } catch (TokenMgrError ex) {
            System.out.println("Token Manager caught an unexpected exception, exiting...");
            throw ex;
        }
    }

    static CompiladorTokenManager initTokenManager(String args[]) throws java.io.FileNotFoundException {
        final SimpleCharStream charStream;
        if (args.length < 1) {
            charStream = new SimpleCharStream(System.in);
        } else {
            charStream = new SimpleCharStream(new java.io.FileInputStream(args[0]),0,0);
        }
        return new CompiladorTokenManager(charStream);
    }
}
PARSER_END(Compilador)

TOKEN_MGR_DECLS : {}

/* ALL */
<*>TOKEN : {
    <"\n">
    <#NUM: (["0"-"9"])+ >
|   <#CHARAC: ["A"-"Z", "a"-"z"]>
|   <#ID: (<CHARAC>)(<CHARAC>|<NUM>)* >
}
<*>SKIP : {
    <~[]>
}


void parse() : {} {
    (sentences())*
    <EOF>
}

void sentences() : {} {
    sentences() sent()
|   sent()
}

void sent() : {} {
    assig() | proc()
}


void assig() : {} {
    'COMPUTE' <ID> '=' exp()
|   'MOVE' (<NUM> | <ID>) 'TO' <ID>
}

void proc() : {} {
    'IF' exp() 'THEN' sentences() elseopt()
|   'EVALUATE' <ID> (whenclause())+ 'END_EVALUATE'
|   'PERFORM' 'UNTIL' exp() sentences() 'END_PERFORM'
|   'DISPLAY' exp()
    
}

void elseopt() : {} {
    'ELSE' sentences() 'END-IF'
|   'END-IF'
}
void whenclause() : {} {
    'WHEN' exp() sentences()
}
void exp() : {} {
    exp() '+' term()
|   exp() '-' term()
|   term()
}
void term() : {} {
    term() '*' fac()
|   term() '/' fac()
|   fac()
}
void fac() : {} {
    (<NUM>|<ID>|'('exp()')')
}


