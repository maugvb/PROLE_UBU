
options {
    STATIC=false;
}

PARSER_BEGIN(Compilador)
import java.util.Stack;
st


public class Compilador {
    public static void main(String args[]) throws java.io.FileNotFoundException {
        final CompiladorTokenManager tokenManager = initCompilador(args);
        final Stack<String> stack = new Stack<String>();

        try {
            while (tokenManager.getNextToken().kind != EOF); // Process All tokens.
            System.out.println("Finished");
        } catch (ParseException ex) {
            System.out.println("Parser caught an unexpected exception, exiting...");
            return;
        }
    }

    static Compiler initCompilador(String args[]) throws java.io.FileNotFoundException {
        if (args.length < 1) {
            return new Compiler(System.in);
        }
        return new Compiler(new java.io.FileInputStream(args[0]));
    }
}
PARSER_END(Compilador)

TOKEN_MGR_DECLS : {}

/* ALL */
TOKEN : {
    <"\n">
    <#NUM: (["0"-"9"])+ >
|   <#CHARAC: ["A"-"Z", "a"-"z"]>
|   <#ID: (<CHARAC>)(<CHARAC>|<NUM>)* >
}
SKIP : {
    <~[]>
}


void parse() : {} {
    (sentences())*
    <EOF>
}

void sentences() : {} {
    (sentences())? sent()
/*|   sent()*/
}

void sent() : {} {
    assig() | proc()
}


void assig() : {} {
    'COMPUTE' <ID> '=' exp()
|   'MOVE' (<NUM> | <ID>) 'TO' <ID>
}

void proc() : {} {
    'IF' exp() 'THEN' sentences() elseopt()
|   'EVALUATE' <ID> (whenclause())+ 'END_EVALUATE'
|   'PERFORM' 'UNTIL' exp() sentences() 'END_PERFORM'
|   'DISPLAY' exp()
    
}

void elseopt() : {} {
    'ELSE' sentences() 'END-IF'
|   'END-IF'
}
void whenclause() : {} {
    'WHEN' exp() sentences()
}
void exp() : {} {
    ( ( '+' | '-' ) exp() '+' term() | term() )
}
void term() : {} {
    ( ('*'|'/') term() fac() | fac() )
}
void fac() : {} {
    (<NUM>|<ID>|'('exp()')')
}


